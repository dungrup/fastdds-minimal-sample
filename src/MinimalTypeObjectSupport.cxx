// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file MinimalTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen.
 */

#include "MinimalTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>

#include "Minimal.hpp"


using namespace eprosima::fastdds::dds::xtypes;

// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_Minimal_type_identifier(
        TypeIdentifierPair& type_ids_Minimal)
{

    ReturnCode_t return_code_Minimal {eprosima::fastdds::dds::RETCODE_OK};
    return_code_Minimal =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "Minimal", type_ids_Minimal);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_Minimal)
    {
        StructTypeFlag struct_flags_Minimal = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_Minimal = "Minimal";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_Minimal;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_Minimal;
        CompleteTypeDetail detail_Minimal = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_Minimal, ann_custom_Minimal, type_name_Minimal.to_string());
        CompleteStructHeader header_Minimal;
        header_Minimal = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_Minimal);
        CompleteStructMemberSeq member_seq_Minimal;
        {
            TypeIdentifierPair type_ids_index;
            ReturnCode_t return_code_index {eprosima::fastdds::dds::RETCODE_OK};
            return_code_index =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint32_t", type_ids_index);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_index)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "index Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_index = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_index = 0x00000000;
            bool common_index_ec {false};
            CommonStructMember common_index {TypeObjectUtils::build_common_struct_member(member_id_index, member_flags_index, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_index, common_index_ec))};
            if (!common_index_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure index member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_index = "index";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_index;
            ann_custom_Minimal.reset();
            CompleteMemberDetail detail_index = TypeObjectUtils::build_complete_member_detail(name_index, member_ann_builtin_index, ann_custom_Minimal);
            CompleteStructMember member_index = TypeObjectUtils::build_complete_struct_member(common_index, detail_index);
            TypeObjectUtils::add_complete_struct_member(member_seq_Minimal, member_index);
        }
        {
            TypeIdentifierPair type_ids_time_stamp;
            ReturnCode_t return_code_time_stamp {eprosima::fastdds::dds::RETCODE_OK};
            return_code_time_stamp =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint32_t", type_ids_time_stamp);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_time_stamp)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "time_stamp Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_time_stamp = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_time_stamp = 0x00000001;
            bool common_time_stamp_ec {false};
            CommonStructMember common_time_stamp {TypeObjectUtils::build_common_struct_member(member_id_time_stamp, member_flags_time_stamp, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_time_stamp, common_time_stamp_ec))};
            if (!common_time_stamp_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure time_stamp member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_time_stamp = "time_stamp";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_time_stamp;
            ann_custom_Minimal.reset();
            CompleteMemberDetail detail_time_stamp = TypeObjectUtils::build_complete_member_detail(name_time_stamp, member_ann_builtin_time_stamp, ann_custom_Minimal);
            CompleteStructMember member_time_stamp = TypeObjectUtils::build_complete_struct_member(common_time_stamp, detail_time_stamp);
            TypeObjectUtils::add_complete_struct_member(member_seq_Minimal, member_time_stamp);
        }
        {
            TypeIdentifierPair type_ids_img_data;
            ReturnCode_t return_code_img_data {eprosima::fastdds::dds::RETCODE_OK};
            return_code_img_data =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_sequence_byte_unbounded", type_ids_img_data);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_img_data)
            {
                return_code_img_data =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_byte", type_ids_img_data);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_img_data)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Sequence element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_sequence_byte_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_sequence_byte_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_img_data, element_identifier_anonymous_sequence_byte_unbounded_ec))};
                if (!element_identifier_anonymous_sequence_byte_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Sequence element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_sequence_byte_unbounded = EK_COMPLETE;
                if (TK_NONE == type_ids_img_data.type_identifier2()._d())
                {
                    equiv_kind_anonymous_sequence_byte_unbounded = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_sequence_byte_unbounded = 0;
                PlainCollectionHeader header_anonymous_sequence_byte_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_byte_unbounded, element_flags_anonymous_sequence_byte_unbounded);
                {
                    SBound bound = 0;
                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_byte_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_byte_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_byte_unbounded", type_ids_img_data))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_byte_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_img_data = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_img_data = 0x00000002;
            bool common_img_data_ec {false};
            CommonStructMember common_img_data {TypeObjectUtils::build_common_struct_member(member_id_img_data, member_flags_img_data, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_img_data, common_img_data_ec))};
            if (!common_img_data_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure img_data member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_img_data = "img_data";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_img_data;
            ann_custom_Minimal.reset();
            CompleteMemberDetail detail_img_data = TypeObjectUtils::build_complete_member_detail(name_img_data, member_ann_builtin_img_data, ann_custom_Minimal);
            CompleteStructMember member_img_data = TypeObjectUtils::build_complete_struct_member(common_img_data, detail_img_data);
            TypeObjectUtils::add_complete_struct_member(member_seq_Minimal, member_img_data);
        }
        CompleteStructType struct_type_Minimal = TypeObjectUtils::build_complete_struct_type(struct_flags_Minimal, header_Minimal, member_seq_Minimal);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_Minimal, type_name_Minimal.to_string(), type_ids_Minimal))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "Minimal already registered in TypeObjectRegistry for a different type.");
        }
    }
}

